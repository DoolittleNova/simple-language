%package "edu.appstate.cs.analysis.parser";
%class "LanguageParser";
%import "edu.appstate.cs.analysis.ast.*";
%import "java.math.BigInteger";

%terminals FOR, RETURN, WHILE,
           IN, ELSEIF, ELSE, ASSIGN, SEMI,
           LCURLY, RCURLY, THEN, COMMA, LBRACKET,
           LT, LTEQ, GT, GTEQ,
           RBRACKET, LPAREN, RPAREN, INTEGER, STRING,
           TRUE, FALSE, IDENTIFIER, PLUS, MULT, NOTEQL, DIV, SUB, IF,
           VAR, NOT, EQUAL, OR, AND, NEG;

%typeof INTEGER = "BigInteger";
%typeof IDENTIFIER = "String";
%typeof stmts = "StmtList";
%typeof expr = "Expr";
%typeof stmt = "Stmt";
%typeof elseifs = "ElseIfList";
%typeof elseif = "ElseIf";
%typeof exprs = "ExprList";

%left RPAREN;
%right NOT, NEG;
%left MULT, DIV;
%left PLUS, SUB;
%left GTEQ, GT, LTEQ, LT;
%left EQUAL, NOTEQL;
%left OR;
%left AND;

%goal stmts;

/* This can be removed once all tokens are used in a real production */
/* START */
%goal placeholder;
placeholder = LPAREN RPAREN STRING;
/* END */

stmts
    = stmt.s {: return new StmtList(s); :}
    | stmt.s stmts.ss {: return new StmtList(s, ss); :}
    ;

stmt
    = IDENTIFIER.i ASSIGN expr.e SEMI {: return new AssignStmt(i, e); :}
    | FOR IDENTIFIER.i IN expr.e LCURLY stmts.ss RCURLY {: return new ForStmt(i, e, ss); :}
    | WHILE expr.e LCURLY stmts.ss RCURLY {: return new WhileStmt(e, ss); :}
    | RETURN expr.e SEMI {: return new ReturnStmt(e); :}
    | expr.e SEMI {: return new ExprStmt(e); :}
    | VAR IDENTIFIER.i SEMI {: return new DeclStmt(i, null); :}
    | IF expr.e THEN LCURLY stmts.ss RCURLY {: return new IfStmt(e, ss, null, null); :}
    | IF expr.e THEN LCURLY stmts.ss RCURLY ELSE LCURLY stmts.sss RCURLY {: return new IfStmt(e, ss, null, sss); :}
    | IF expr.e THEN LCURLY stmts.ss RCURLY elseifs.es {: return new IfStmt(e, ss, es, null); :}
    | IF expr.e THEN LCURLY stmts.ss RCURLY elseifs.es ELSE LCURLY stmts.s2 RCURLY {: return new IfStmt(e, ss, es, s2); :}
    ;

elseifs
    = elseif.ei {: return new ElseIfList(ei); :}
    | elseif.ei elseifs.eis {: return new ElseIfList(ei, eis); :}
    ;

elseif
    = ELSEIF expr.e THEN LCURLY stmts.s RCURLY {: return new ElseIf(e, s); :}
    ;

expr
    = INTEGER.n {: return new IntLiteral(n); :}
    | TRUE {: return new BooleanLiteral(true); :}
    | FALSE {: return new BooleanLiteral(false); :}
    | expr.a PLUS expr.b {: return new PlusExpr(a, b); :}
    | expr.a SUB expr.b {: return new SubExpr(a, b); :}
    | expr.a MULT expr.b {: return new MultExpr(a, b); :}
    | expr.a EQUAL expr.b {: return new EqualExpr(a, b); :}
    | expr.a OR expr.b {: return new OrExpr(a, b); :}
    | expr.a AND expr.b {: return new AndExpr(a,b); :}
    | IDENTIFIER.i {: return new IdentExpr(i); :}
    | expr.a NOTEQL expr.b {: return new NotEqlExpr(a, b); :}
    | NOT expr.a {: return new NotExpr(a); :}
    | expr.a DIV expr.b {: return new DivExpr(a, b); :}
    | expr.a LT expr.b {: return new LtExpr(a, b); :}
    | expr.a LTEQ expr.b {: return new LtEqExpr(a, b); :}
    | expr.a GT expr.b {: return new GtExpr(a, b); :}
    | expr.a GTEQ expr.b {: return new GtEqExpr(a, b); :}
    | NEG expr.a {: return new NegExpr (a); :}
    | LBRACKET RBRACKET {: return new ListExpr(new ExprList()); :}
    | LBRACKET exprs.es RBRACKET {: return new ListExpr(es); :}
    | LPAREN expr.e RPAREN {: return e; :}
    ;

exprs
    = expr.e {: return new ExprList(e); :}
    | expr.e COMMA exprs.es {: return new ExprList(e, es); :}
    ;
