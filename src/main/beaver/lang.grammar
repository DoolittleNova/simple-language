%package "edu.appstate.cs.analysis.parser";
%class "LanguageParser";
%import "edu.appstate.cs.analysis.ast.*";
%import "java.math.BigInteger";

%terminals FOR, RETURN, WHILE,
           IN, IF, ELSEIF, ELSE, ASSIGN, SEMI,
           LCURLY, RCURLY, THEN, COMMA, LBRACKET,
           RBRACKET, LPAREN, RPAREN, INTEGER, STRING,
           TRUE, FALSE, IDENTIFIER, PLUS, MULT;

%typeof INTEGER = "BigInteger";
%typeof IDENTIFIER = "String";
%typeof stmts = "StmtList";
%typeof expr = "Expr";
%typeof stmt = "Stmt";

%goal stmts;

/* This can be removed once all tokens are used in a real production */
/* START */
%goal placeholder;
placeholder = RETURN WHILE IN IF ELSEIF ELSE LCURLY RCURLY THEN COMMA LBRACKET RBRACKET LPAREN RPAREN STRING TRUE FALSE;
/* END */

stmts
    = stmt.s {: return new StmtList(s); :}
    | stmt.s stmts.ss {: return new StmtList(s, ss); :}
    ;

stmt
    = IDENTIFIER.i ASSIGN expr.e SEMI {: return new AssignStmt(i, e); :}
    | FOR IDENTIFIER.i IN expr.e LCURLY stmts.ss RCURLY {: return new ForStmt(i, e, ss); :}
    | expr.e SEMI {: return new ExprStmt(e); :}
    | IF expr.e THEN LCURLY stmts.ss RCURLY ELSE LCURLY stmts.sss RCURLY {: return new IfElseStmt(e, ss, ss); :}
    ;

expr
    = INTEGER.n {: return new IntLiteral(n); :}
    | expr.a PLUS expr.b {: return new PlusExpr(a, b); :}
    | expr.a MULT expr.b {: return new MultExpr(a, b); :}
    | expr.a ASSIGN ASSIGN expr.b {: return new EqualExpr(a, b); :}
    | IDENTIFIER.i {: return new IdentExpr(i); :}
    ;
